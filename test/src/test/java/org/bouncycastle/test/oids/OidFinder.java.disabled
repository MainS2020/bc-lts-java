package org.bouncycastle.test.oids;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.HashSet;

import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.anssi.ANSSIObjectIdentifiers;
import org.bouncycastle.asn1.bc.BCObjectIdentifiers;
import org.bouncycastle.asn1.bsi.BSIObjectIdentifiers;
import org.bouncycastle.asn1.cmc.CMCObjectIdentifiers;
import org.bouncycastle.asn1.cmp.CMPObjectIdentifiers;
import org.bouncycastle.asn1.cms.CMSObjectIdentifiers;
import org.bouncycastle.asn1.crmf.CRMFObjectIdentifiers;
import org.bouncycastle.asn1.cryptlib.CryptlibObjectIdentifiers;
import org.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers;
import org.bouncycastle.asn1.dvcs.DVCSObjectIdentifiers;
import org.bouncycastle.asn1.eac.EACObjectIdentifiers;
import org.bouncycastle.asn1.edec.EdECObjectIdentifiers;
import org.bouncycastle.asn1.gm.GMObjectIdentifiers;
import org.bouncycastle.asn1.gnu.GNUObjectIdentifiers;
import org.bouncycastle.asn1.iana.IANAObjectIdentifiers;
import org.bouncycastle.asn1.icao.ICAOObjectIdentifiers;
import org.bouncycastle.asn1.isara.IsaraObjectIdentifiers;
import org.bouncycastle.asn1.isismtt.ISISMTTObjectIdentifiers;
import org.bouncycastle.asn1.iso.ISOIECObjectIdentifiers;
import org.bouncycastle.asn1.kisa.KISAObjectIdentifiers;
import org.bouncycastle.asn1.microsoft.MicrosoftObjectIdentifiers;
import org.bouncycastle.asn1.misc.MiscObjectIdentifiers;
import org.bouncycastle.asn1.nist.NISTObjectIdentifiers;
import org.bouncycastle.asn1.nsri.NSRIObjectIdentifiers;
import org.bouncycastle.asn1.ntt.NTTObjectIdentifiers;
import org.bouncycastle.asn1.ocsp.OCSPObjectIdentifiers;
import org.bouncycastle.asn1.oiw.OIWObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.asn1.rosstandart.RosstandartObjectIdentifiers;
import org.bouncycastle.asn1.sec.SECObjectIdentifiers;
import org.bouncycastle.asn1.teletrust.TeleTrusTObjectIdentifiers;
import org.bouncycastle.asn1.ua.UAObjectIdentifiers;
import org.bouncycastle.asn1.x509.X509ObjectIdentifiers;
import org.bouncycastle.asn1.x509.qualified.ETSIQCObjectIdentifiers;
import org.bouncycastle.asn1.x509.qualified.RFC3739QCObjectIdentifiers;
import org.bouncycastle.asn1.x509.sigi.SigIObjectIdentifiers;
import org.bouncycastle.asn1.x9.X9ObjectIdentifiers;
import org.bouncycastle.pqc.asn1.PQCObjectIdentifiers;
import org.bouncycastle.tls.TlsObjectIdentifiers;
import org.jsoup.HttpStatusException;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

public class OidFinder
{
    public static void main(String[] args)
        throws Exception
    {

        for (Class src : new HashSet<Class>(Arrays.asList(ANSSIObjectIdentifiers.class,
            BCObjectIdentifiers.class,
            CryptlibObjectIdentifiers.class,
            CryptoProObjectIdentifiers.class,
            EdECObjectIdentifiers.class,
            GMObjectIdentifiers.class,
            GNUObjectIdentifiers.class,
            IANAObjectIdentifiers.class,
            IsaraObjectIdentifiers.class,
            ISOIECObjectIdentifiers.class,
            KISAObjectIdentifiers.class,
            MicrosoftObjectIdentifiers.class,
            MiscObjectIdentifiers.class,
            NISTObjectIdentifiers.class,
            NSRIObjectIdentifiers.class,
            NTTObjectIdentifiers.class,
            OCSPObjectIdentifiers.class,
            OIWObjectIdentifiers.class,
            PKCSObjectIdentifiers.class,
            RosstandartObjectIdentifiers.class,
            SECObjectIdentifiers.class,
            TeleTrusTObjectIdentifiers.class,
            UAObjectIdentifiers.class,
            X509ObjectIdentifiers.class,
            ETSIQCObjectIdentifiers.class,
            RFC3739QCObjectIdentifiers.class,
            SigIObjectIdentifiers.class,
            X9ObjectIdentifiers.class,
            BSIObjectIdentifiers.class,
            CMSObjectIdentifiers.class,
            EACObjectIdentifiers.class,
            ISISMTTObjectIdentifiers.class,
            PQCObjectIdentifiers.class,
            ANSSIObjectIdentifiers.class,
            BCObjectIdentifiers.class,
            CryptlibObjectIdentifiers.class,
            CryptoProObjectIdentifiers.class,
            EdECObjectIdentifiers.class,
            GMObjectIdentifiers.class,
            GNUObjectIdentifiers.class,
            IANAObjectIdentifiers.class,
            IsaraObjectIdentifiers.class,
            ISOIECObjectIdentifiers.class,
            KISAObjectIdentifiers.class,
            MicrosoftObjectIdentifiers.class,
            MiscObjectIdentifiers.class,
            NISTObjectIdentifiers.class,
            NSRIObjectIdentifiers.class,
            NTTObjectIdentifiers.class,
            OCSPObjectIdentifiers.class,
            OIWObjectIdentifiers.class,
            PKCSObjectIdentifiers.class,
            RosstandartObjectIdentifiers.class,
            SECObjectIdentifiers.class,
            TeleTrusTObjectIdentifiers.class,
            UAObjectIdentifiers.class,
            X509ObjectIdentifiers.class,
            ETSIQCObjectIdentifiers.class,
            RFC3739QCObjectIdentifiers.class,
            SigIObjectIdentifiers.class,
            X9ObjectIdentifiers.class,
            BSIObjectIdentifiers.class,
            CMSObjectIdentifiers.class,
            EACObjectIdentifiers.class,
            ISISMTTObjectIdentifiers.class,
            PQCObjectIdentifiers.class,
            TlsObjectIdentifiers.class,
            TlsObjectIdentifiers.class,
            BSIObjectIdentifiers.class,
            CMCObjectIdentifiers.class,
            CMPObjectIdentifiers.class,
            CMSObjectIdentifiers.class,
            CRMFObjectIdentifiers.class,
            DVCSObjectIdentifiers.class,
            EACObjectIdentifiers.class,
            ICAOObjectIdentifiers.class,
            ISISMTTObjectIdentifiers.class,
            BSIObjectIdentifiers.class,
            CMCObjectIdentifiers.class,
            CMPObjectIdentifiers.class,
            CMSObjectIdentifiers.class,
            CRMFObjectIdentifiers.class,
            DVCSObjectIdentifiers.class,
            EACObjectIdentifiers.class,
            ICAOObjectIdentifiers.class,
            ISISMTTObjectIdentifiers.class)))
        {

            System.out.println("");
            System.out.println(src.getName());
            System.out.println();
            for (Field f : src.getFields())
            {
                Object o = f.get(null);

                if (o instanceof ASN1ObjectIdentifier)
                {
                    ASN1ObjectIdentifier oi = (ASN1ObjectIdentifier)o;

                    try
                    {
                        Document doc = Jsoup.connect("http://oid-info.com/get/" + oi.toString()).get();
                        Elements element = doc.select("td[style=background-color:#F8ECE0;] > font > strong > code");
                        String nodeName = element.text();

                        if (nodeName.contains("("))
                        {
                            nodeName = nodeName.substring(0, nodeName.indexOf("("));
                        }

                        nodeName = nodeName.toLowerCase();

                        nodeName = nodeName.replace("-", "");

                        String fieldName = f.getName().toLowerCase().replace("_", "");

                        if (fieldName.equalsIgnoreCase(nodeName))
                        {
                            // Direct match.
                            System.out.println(f.getName() + "   ...  Equals");
                        }
                        else if (nodeName.startsWith(fieldName))
                        {
                            // Starts with
                            System.out.printf(f.getName() + "   ...  (%s starts with [%s])\n", nodeName, fieldName);
                        }
                        else if (nodeName.endsWith(fieldName))
                        {
                            System.out.printf(f.getName() + "   ...  (%s ends with [%s])\n", nodeName, fieldName);
                        }
                        else if (fieldName.endsWith(nodeName))
                        {
                            System.out.printf(f.getName() + "   ...  ([%s] ends with %s)\n", fieldName, nodeName);
                        }
                        else if (fieldName.contains(nodeName))
                        {
                            System.out.printf(f.getName() + "   ...  ([%s] contains %s)\n", fieldName, nodeName);
                        }
                        else if (nodeName.contains(fieldName))
                        {
                            System.out.printf(f.getName() + "   ...  (%s contains [%s])\n", nodeName, fieldName);
                        }
                        else if (fieldName.startsWith(nodeName))
                        {
                            // Starts with
                            System.out.printf(f.getName() + "   ...  ([%s] starts with %s)\n", fieldName, nodeName);
                        }
                        else
                        {
                            System.out.printf(f.getName() + "   ... [%s] !=  %s\n", fieldName, nodeName);
                        }

                    }
                    catch (HttpStatusException statusException)
                    {
                        System.out.println("Status: " + statusException.getStatusCode() + " " + f.getName() + " " + oi.toString());
                        statusException.getMessage();
                    }

                }
                Thread.sleep(1000);
            }
        }

    }

}
