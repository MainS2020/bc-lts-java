import static ExtraFunctions.*

jar.archiveBaseName = "bccore-lts$vm_range"

dependencies {

}

test {
    testLogging.showStandardStreams = true
    testLogging.showCauses = true
    testLogging.showExceptions = true
    testLogging.showStackTraces = true

    jvmArgs propValsAsArgs(project, test.name, "variant", "org.bouncycastle.native.cpu_variant"),
            propValsAsArgs(project, test.name, "failsafe_skip", "test.bcfips.ignore.native");
//  jvmArgs '-Dtest.bcfips.ignore.native=sha,gcm,cbc,ecb,rand,seed', '-Dorg.bouncycastle.native.cpu_variant=java'

    filter {
        includeTestsMatching "AllTest*"
    }

}

jar {
  from sourceSets.main.output
}

task sourcesJar(type: Jar) {
  archiveBaseName = jar.archiveBaseName
  classifier = 'sources'
  from sourceSets.main.allSource
}

javadoc {
  title = "Bouncy Castle Library (LTS Edition) ${version} Low-Level API"
  options.windowTitle = "Bouncy Castle Library (LTS Edition) ${version} Low-Level API"
  options.overview = "overview.html"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveBaseName = jar.archiveBaseName
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}


task cleanNativeVariants(type: Delete) {
    delete("$projectDir/src/main/resources/native/");
    delete("$projectDir/src/main/resources/META-INF/DRIVERS");
}



task withNative() {
    doLast {

        if (directoryExists("$rootDir/native/target/linux/x86_64/probe")) {
            copyDirContent("$rootDir/native/target/linux/x86_64/probe", "$projectDir/src/main/resources/native/linux/x86_64/probe")
        }

        if (directoryExists("$rootDir/native/target/linux/x86_64/sse")) {
            copyDirContent("$rootDir/native/target/linux/x86_64/sse", "$projectDir/src/main/resources/native/linux/x86_64/sse")
        }

        if (directoryExists("$rootDir/native/target/linux/x86_64/avx")) {
            copyDirContent("$rootDir/native/target/linux/x86_64/avx", "$projectDir/src/main/resources/native/linux/x86_64/avx")
        }

        if (directoryExists("$rootDir/native/target/linux/x86_64/vaes")) {
            copyDirContent("$rootDir/native/target/linux/x86_64/vaes", "$projectDir/src/main/resources/native/linux/x86_64/vaes")
        }

    }
}



