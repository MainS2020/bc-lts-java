import static ExtraFunctions.*

jar.archiveBaseName = "bccore-lts$vm_range"

dependencies {

}

test {
    testLogging.showStandardStreams = true
    testLogging.showCauses = true
    testLogging.showExceptions = true
    testLogging.showStackTraces = true


   jvmArgs '-Dtest.bcfips.ignore.native=sha,gcm,cbc,ecb,es,cfb,ctr', '-Dorg.bouncycastle.native.cpu_variant=java'

    filter {
        includeTestsMatching "AllTest*"
    }

}

jar {
  from sourceSets.main.output
}

task sourcesJar(type: Jar) {
  archiveBaseName = jar.archiveBaseName
  classifier = 'sources'
  from sourceSets.main.allSource
  into('native/intel') {
    from '../native_c/intel'
  }
  into('native/jniutil') {
    from '../native_c/jniutil'
  }
}

javadoc {
  title = "Bouncy Castle Library (LTS Edition) ${version} Low-Level API"
  options.windowTitle = "Bouncy Castle Library (LTS Edition) ${version} Low-Level API"
  options.overview = "overview.html"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveBaseName = jar.archiveBaseName
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}


task cleanNative(type: Delete) {
    delete("$projectDir/src/main/resources/native/");
    delete("$projectDir/src/main/resources/META-INF/DRIVERS");
}


jar {
  from sourceSets.main.output
  into('native') {
    from '../native_c/target'
  }
  manifest.attributes('Multi-Release': 'true')
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

task('copyJars', type:Copy) {
  from new File(projectDir,"build/libs")
  into new File(rootDir,"jars")
}
