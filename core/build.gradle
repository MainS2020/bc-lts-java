import static ExtraFunctions.*

jar.archiveBaseName = "bccore-lts$vm_range"

dependencies {

}

test {
    testLogging.showStandardStreams = true
    testLogging.showCauses = true
    testLogging.showExceptions = true
    testLogging.showStackTraces = true


   jvmArgs '-Dtest.bcfips.ignore.native=sha,gcm,cbc,ecb,es,cfb,ctr', '-Dorg.bouncycastle.native.cpu_variant=java'

    filter {
        includeTestsMatching "AllTest*"
    }

}

jar {
  from sourceSets.main.output
}

task sourcesJar(type: Jar) {
  archiveBaseName = jar.archiveBaseName
  classifier = 'sources'
  from sourceSets.main.allSource
    exclude("**/*.so")
  into('native/intel') {
    from '../native_c/intel'
  }
  into('native/jniutil') {
    from '../native_c/jniutil'
  }
}

javadoc {
  title = "Bouncy Castle Library (LTS Edition) ${version} Low-Level API"
  options.windowTitle = "Bouncy Castle Library (LTS Edition) ${version} Low-Level API"
  options.overview = "overview.html"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveBaseName = jar.archiveBaseName
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}


task cleanNative(type: Delete) {
    delete("$projectDir/src/main/resources/native/");
    delete("$projectDir/src/main/resources/META-INF/DRIVERS");
}


task('copyJars', type:Copy) {
    from new File(projectDir,"build/libs")
    into new File(rootDir,"../bc-lts-java-jars/${version}/")
}

task withNative() {
    doLast {

        // Intel -- Linux
        if (directoryExists("$rootDir/native_c/target/linux/x86_64/probe")) {
            copyDirContent("$rootDir/native_c/target/linux/x86_64/probe", "$projectDir/src/main/resources/native/linux/x86_64/probe")
        }

        if (directoryExists("$rootDir/native_c/target/linux/x86_64/sse")) {
            copyDirContent("$rootDir/native_c/target/linux/x86_64/sse", "$projectDir/src/main/resources/native/linux/x86_64/sse")
        }

        if (directoryExists("$rootDir/native_c/target/linux/x86_64/avx")) {
            copyDirContent("$rootDir/native_c/target/linux/x86_64/avx", "$projectDir/src/main/resources/native/linux/x86_64/avx")
        }

        if (directoryExists("$rootDir/native_c/target/linux/x86_64/vaes")) {
            copyDirContent("$rootDir/native_c/target/linux/x86_64/vaes", "$projectDir/src/main/resources/native/linux/x86_64/vaes")
        }

        if (directoryExists("$rootDir/native_c/target/linux/x86_64/vaesf")) {
            copyDirContent("$rootDir/native_c/target/linux/x86_64/vaesf", "$projectDir/src/main/resources/native/linux/x86_64/vaesf")
        }

        // ARM - darwin
        if (directoryExists("$rootDir/native_c/target/darwin/arm64/probe")) {
            copyDirContent("$rootDir/native_c/target/darwin/arm64/probe", "$projectDir/src/main/resources/native/darwin/arm64/probe")
        }

        if (directoryExists("$rootDir/native_c/target/darwin/arm64/neon")) {
            copyDirContent("$rootDir/native_c/target/darwin/arm64/neon", "$projectDir/src/main/resources/native/darwin/arm64/neon")
        }

        // ARM - linux
        if (directoryExists("$rootDir/native_c/target/linux/arm64/probe")) {
            copyDirContent("$rootDir/native_c/target/linux/arm64/probe", "$projectDir/src/main/resources/native/linux/arm64/probe")
        }

        if (directoryExists("$rootDir/native_c/target/linux/arm64/neon")) {
            copyDirContent("$rootDir/native_c/target/linux/arm64/neon", "$projectDir/src/main/resources/native/linux/arm64/neon")
        }


    }
}



