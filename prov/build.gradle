import java.nio.file.CopyOption
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import static ExtraFunctions.*

jar.archiveBaseName = "bcprov-lts$vm_range"

sourceSets {
    main {
        java {
            srcDirs '../core/src/main/java'
        }
        resources {
            srcDirs '../core/src/main/resources'
        }
    }
    java9 {
        java {
            srcDirs = ['src/main/jdk1.9']
        }
    }
    java11 {
        java {
            srcDirs = ['src/main/jdk1.11']
        }
    }
    java15 {
        java {
            srcDirs = ['src/main/jdk1.15']
        }
    }
}

dependencies {
  implementation project(path: ':core')
  java9Implementation files([sourceSets.main.output.classesDirs]) {
     builtBy compileJava
  }

  java11Implementation files([sourceSets.main.output.classesDirs, sourceSets.java9.output.classesDirs]) {
     builtBy compileJava9Java
  }

  java15Implementation files([sourceSets.main.output.classesDirs, sourceSets.java9.output.classesDirs, sourceSets.java11.output.classesDirs]) {
     builtBy compileJava11Java
  }
}

compileJava {
  javaCompiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(8)
  }
}

compileJava9Java {
  javaCompiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(11)
  }
  sourceCompatibility = 9
  targetCompatibility = 9
  options.sourcepath = files(['../core/src/main/java', 'src/main/java', 'src/main/jdk1.9'])
}

compileJava11Java {
  javaCompiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

compileJava15Java {
  javaCompiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(15)
  }
}


jar {
  from sourceSets.main.output
  into('META-INF/versions/9') {
    from sourceSets.java9.output
  }
  into('META-INF/versions/11') {
    from sourceSets.java11.output
  }
  into('META-INF/versions/15') {
    from sourceSets.java15.output
  }
  manifest.attributes('Multi-Release': 'true')
}

task sourcesJar(type: Jar) {
  archiveBaseName = jar.archiveBaseName
  classifier = 'sources'
  from sourceSets.main.allSource
    exclude("**/*.so")
  into('META-INF/versions/9') {
    from sourceSets.java9.allSource
  }
  into('META-INF/versions/11') {
    from sourceSets.java11.allSource
  }
  into('META-INF/versions/15') {
    from sourceSets.java15.allSource
  }
  into('native/intel') {
    from '../native_c/intel'
  }
  into('native/jniutil') {
    from '../native_c/jniutil'
  }
}

task fullJavaDoc(type: Javadoc) {
  title = "Bouncy Castle Library (LTS Edition) ${version} Provider API"
  options.windowTitle = "Bouncy Castle Library (LTS Edition) ${version} Provider API"
  options.overview = "overview.html"
  source = files([sourceSets.main.allJava])
}

task javadocJar(type: Jar, dependsOn: fullJavaDoc) {
  archiveBaseName = jar.archiveBaseName
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

task('copyJars', type:Copy) {
    from new File(projectDir,"build/libs")
    into new File(rootDir,"../bc-lts-java-jars/${version}/")
}
