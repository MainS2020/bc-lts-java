import java.nio.file.CopyOption
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import static ExtraFunctions.*

jar.archiveBaseName = "bcutil-lts${vm_range}"

sourceSets {
    java9 {
        java {
            srcDirs = ['src/main/jdk1.9']
        }
    }
}

dependencies {

  implementation project(':prov')
  implementation files("${lts_prov}")
  implementation project(path: ':core')
  implementation project(path: ':prov')
  testImplementation group: 'junit', name: 'junit', version: '4.11'

  java9Implementation project(':prov')
  java9Implementation files(sourceSets.main.output.classesDirs) {
     builtBy compileJava
  }
}

compileJava {
  javaCompiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(8)
  }
}

compileJava9Java {
  javaCompiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(11)
  }
  sourceCompatibility = 9
  targetCompatibility = 9

  options.compilerArgs += [
                    '--module-path', "${lts_prov}"
  ]
  options.sourcepath = files('src/main/java', 'src/main/jdk1.9')
}

jar {
  from sourceSets.main.output
  into('META-INF/versions/9') {
    from sourceSets.java9.output
  }
  manifest.attributes('Multi-Release': 'true')
}

task sourcesJar(type: Jar) {
  archiveBaseName = jar.archiveBaseName
  classifier = 'sources'
  from sourceSets.main.allSource
}

javadoc {
  title = "Bouncy Castle Library (LTS Edition) ${version} Utility Classes API"
  options.windowTitle = "Bouncy Castle Library (LTS Edition) ${version} Utility Classes API"
  options.overview = "overview.html"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveBaseName = jar.archiveBaseName
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

task('copyJars', type:Copy) {
  from new File(projectDir,"build/libs")
  into new File(rootDir,"jars")
}

