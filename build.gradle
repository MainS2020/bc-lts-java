
import static ExtraFunctions.propValsAsArgs

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

plugins {
  id "io.spring.nohttp" version "0.0.8"
  id "checkstyle"
  id "jacoco"
  id "java"
}

if (JavaVersion.current().isJava8Compatible())
{
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

// this needs to go here, otherwise it can't find config
apply plugin: 'io.spring.nohttp'

allprojects {
  apply plugin: 'java'
  apply plugin: 'java-library'
  apply plugin: 'checkstyle'
  apply plugin: 'jacoco'
  
  repositories {
    mavenCentral()
  }

  dependencies {
    testImplementation 'junit:junit:4.13.2'
  }


}

ext {
  bcTestDataHome = file('core/src/test/data').absolutePath

  JavaVersion current = JavaVersion.current();
  if (current.compareTo(JavaVersion.VERSION_1_8) <= 0)
  {
     vm_range = '6to8'
     vm_source = 6
     vm_target = 6
  }
  else
  {
     vm_range = '8on'
     vm_source = 8
     vm_target = 8
  }

  lts_prov = "${rootProject.projectDir}/prov/build/libs/bcprov-lts${vm_range}-${version}.jar"
  lts_util = "${rootProject.projectDir}/util/build/libs/bcutil-lts${vm_range}-${version}.jar"
  lts_pkix = "${rootProject.projectDir}/pkix/build/libs/bcpkix-lts${vm_range}-${version}.jar"
}

task printProperties {
  doLast {
    println bcTestDataHome
  }
}

task allTestJar(type: Jar) {
  from(project(":core").sourceSets.test.output)
  exclude("org/bouncycastle/crypto/engines/*")
  exclude("org/bouncycastle/crypto/NativeEntropyTests.*")
  exclude("org/bouncycastle/crypto/NativeFailsafeTest.*")
  from(project(":mail").sourceSets.test.output)
  from(project(":pkix").sourceSets.test.output)
  from(project(":prov").sourceSets.test.output)
  from(project(":tls").sourceSets.test.output)
  from(project(":util").sourceSets.test.output)
  from(project(":test").sourceSets.test.output)
  classifier("tests")
}

allTestJar.dependsOn(compileTestJava);


task allTestUnisgnedJar(type: Jar) {
  from(project(":core").sourceSets.test.output)
  from(project(":mail").sourceSets.test.output)
  from(project(":pkix").sourceSets.test.output)
  from(project(":prov").sourceSets.test.output)
  from(project(":tls").sourceSets.test.output)
  from(project(":util").sourceSets.test.output)
  from(project(":test").sourceSets.test.output)
  classifier("unsigned-tests")
}

allTestUnisgnedJar.dependsOn(compileTestJava);

subprojects {
  apply plugin: 'eclipse'

  sourceCompatibility = "$vm_source"
  targetCompatibility = "$vm_target"

  task('testVAES', type: Test) {
    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "2048m"
    testLogging.showStandardStreams = true
    testLogging.showCauses = true
    testLogging.showExceptions = true
    testLogging.showStackTraces = true

    filter {
      includeTestsMatching "AllTest*"
    }

//  doFirst {
//    removeTempFileNix(propValOrFail(project, "testAVX", "x86_64", "library_path"))
//  }

    jvmArgs propValsAsArgs(project, "testVAES", "x86_64", "variant", "org.bouncycastle.native.cpu_variant"),
            propValsAsArgs(project, "testVAES", "x86_64", "sentinel", "org.bouncycastle.native.sentinel"),
            propValsAsArgs(project, "testVAES", "x86_64", "failsafe_skip", "test.bcfips.ignore.native")

    // jvmArgs '-Dtest.bcfips.ignore.native=sha', '-Dorg.bouncycastle.native.library_path=/tmp/bcfipslibs', '-Dorg.bouncycastle.native.cpu_variant=linux-x86_64-avx'

  }

  task('testAVX', type: Test) {
    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "2048m"
    testLogging.showStandardStreams = true
    testLogging.showCauses = true
    testLogging.showExceptions = true
    testLogging.showStackTraces = true

    filter {
      includeTestsMatching "AllTest*"

      if (rootProject.hasProperty("skip.pqc.tests"))
      {
        exclude('**/pqc/**')
      }
    }

//  doFirst {
//    removeTempFileNix(propValOrFail(project, "testAVX", "x86_64", "library_path"))
//  }

    jvmArgs propValsAsArgs(project, "testAVX", "x86_64", "variant", "org.bouncycastle.native.cpu_variant"),
            propValsAsArgs(project, "testAVX", "x86_64", "sentinel", "org.bouncycastle.native.sentinel"),
            propValsAsArgs(project, "testAVX", "x86_64", "failsafe_skip", "test.bcfips.ignore.native")

    // jvmArgs '-Dtest.bcfips.ignore.native=sha', '-Dorg.bouncycastle.native.library_path=/tmp/bcfipslibs', '-Dorg.bouncycastle.native.cpu_variant=linux-x86_64-avx'

  }

  task('testSSE', type: Test) {
    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "2048m"
    testLogging.showStandardStreams = true
    testLogging.showCauses = true
    testLogging.showExceptions = true
    testLogging.showStackTraces = true

    filter {
      includeTestsMatching "AllTest*"

      if (rootProject.hasProperty("skip.pqc.tests"))
      {
        exclude('**/pqc/**')
      }
    }

    // doFirst {
    //   removeTempFileNix(propValOrFail(project, "testAVX", "x86_64", "library_path"))
    // }
    jvmArgs propValsAsArgs(project, "testSSE", "x86_64", "variant", "org.bouncycastle.native.cpu_variant"),
            propValsAsArgs(project, "testSSE", "x86_64", "sentinel", "org.bouncycastle.native.sentinel"),
            propValsAsArgs(project, "testSSE", "x86_64", "failsafe_skip", "test.bcfips.ignore.native");
  }


  task testFull(type: Test) {

    testLogging.showStandardStreams = true
    testLogging.showCauses = true
    testLogging.showExceptions = true
    testLogging.showStackTraces = true

    systemProperties = [
            'bc.test.data.home': bcTestDataHome,
            'test.full'        : 'true'
    ]
    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"

    finalizedBy jacocoTestReport

    filter {
      includeTestsMatching "AllTest*"
    }
  }

  test {
    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = true
    testLogging.showCauses = true
    testLogging.showExceptions = true
    testLogging.showStackTraces = true

    finalizedBy jacocoTestReport

    filter {
      includeTestsMatching "AllTest*"

      if (rootProject.hasProperty("skip.pqc.tests"))
      {
        exclude('**/pqc/**')
      }
    }
  }


  dependencies {
    checkstyle files("$rootDir/config/checkstyle/lib/methodchecker.jar")
    checkstyle 'com.puppycrawl.tools:checkstyle:9.0'
  }


  checkstyle {
    configFile file("$rootDir/config/checkstyle/checkstyle.xml");
    toolVersion '9.0'; // your choice here
    sourceSets = [project.sourceSets.main]
  }


  jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
  }

  jacoco {
    reportsDirectory = layout.buildDirectory.dir("jacoco")
  }

}


test.dependsOn([':core:test', ':prov:test', ':pkix:test', ':mail:test', 'pg:test', ':tls:test'])

